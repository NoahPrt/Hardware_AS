@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package nest-keycloak-connect {
  class AuthGuard

  class "@Roles" as Roles
  hide Roles circle
}

package hardware #DDDDDD {
  package entity #FFFFFF {
    class Hardware <<entity>>
  }

  package service #FFFFFF {
    class HardwareWriteService << control >>
  }

  class "type HardwareDTO = Omit<Hardware, 'abbildungen' | 'updated' | 'created'" as HardwareDTO
  hide HardwareDTO circle

    interface IdInput {
        id: number
    }

  class HardwareMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() HardwareDTO: HardwareDTO): Promise<number>
    + @Mutation() @Roles() async update(@Args() HardwareDTO: HardwareDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() id: IdInput): Promise<boolean>
  }

  HardwareMutationResolver o-down-> "1" HardwareWriteService : service

  HardwareMutationResolver ..> Hardware
  HardwareMutationResolver ..> HardwareDTO
  HardwareMutationResolver ..> IdInput
  HardwareDTO .up.> Hardware
  HardwareMutationResolver ..> Promise
  HardwareMutationResolver ..> Resolver

  HardwareMutationResolver .up.> AuthGuard
  HardwareMutationResolver .up.> Roles

  HardwareDTO .[hidden].> Promise
  HardwareDTO .[hidden].> Resolver
}

hide empty members

footer (c) Juergen Zimmermann

@enduml
